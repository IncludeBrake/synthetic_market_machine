name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version:
          # Required: Python 3.12.x
          - "3.12"
          # Allowed: Python 3.11.13
          - "3.11.13"
        include:
          # Experimental: Python 3.13+ (only on Ubuntu for faster testing)
          - os: ubuntu-latest
            python-version: "3.13-dev"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential python3-dev

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install gcc

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        # Windows dependencies are handled by pip for most packages

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio black isort mypy flake8

    - name: Run linting
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        python -m flake8 smvm --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        python -m flake8 smvm --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run type checking
      run: |
        python -m mypy smvm --ignore-missing-imports

    - name: Run security scanning
      run: |
        # Install security scanning tools
        pip install bandit safety
        # Run security scans
        python -m bandit -r smvm/ -f json -o security_report.json || true
        python -m safety check --json > safety_report.json || true

    - name: Run tests
      run: |
        python -m pytest --cov=smvm --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Run performance benchmarks
      run: |
        pip install pytest-benchmark
        python -m pytest tests/ --benchmark-only --benchmark-json=benchmark.json || true

    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
          benchmark.json
          security_report.json
          safety_report.json
          .coverage

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Check code formatting
      run: |
        pip install black isort
        black --check --diff smvm/
        isort --check-only --diff smvm/

    - name: Check documentation
      run: |
        # Check if README and key docs exist
        ls -la README.md
        ls -la docs/
        ls -la ops/

    - name: Validate requirements consistency
      run: |
        # Check if requirements.txt and requirements.lock are consistent
        pip install -r requirements.txt --dry-run
        echo "Requirements validation complete"

  required-checks:
    name: Required Checks (Python 3.12.x)
    runs-on: ubuntu-latest
    needs: [test, quality-gate]

    if: contains(matrix.python-version, '3.12') && matrix.os == 'ubuntu-latest'

    steps:
    - name: All required checks passed
      run: |
        echo "‚úÖ All required checks passed for Python 3.12.x"
        echo "‚úÖ CI pipeline successful"

  experimental-checks:
    name: Experimental Checks (Python 3.13+)
    runs-on: ubuntu-latest
    needs: test
    continue-on-error: true

    if: contains(matrix.python-version, '3.13')

    steps:
    - name: Experimental Python version testing
      run: |
        echo "üß™ Testing experimental Python ${{ matrix.python-version }}"
        echo "Results may vary - this is for compatibility testing only"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [required-checks]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add deployment commands here
        echo "‚úÖ Staging deployment complete"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [required-checks]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands here
        echo "‚úÖ Production deployment complete"

  notify:
    name: Notify Stakeholders
    runs-on: ubuntu-latest
    needs: [required-checks, experimental-checks]
    if: always()

    steps:
    - name: Send notification
      run: |
        # Add notification logic here (Slack, email, etc.)
        echo "Pipeline completed with status: ${{ job.status }}"

        if [ "${{ job.status }}" = "success" ]; then
          echo "‚úÖ All checks passed successfully"
        else
          echo "‚ùå Some checks failed - review pipeline results"
        fi
